{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8267519,"sourceType":"datasetVersion","datasetId":4908092}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/robertmounce/qatar-development-economics?scriptVersionId=189668350\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"whitegrid\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-25T03:10:04.148702Z","iopub.execute_input":"2024-07-25T03:10:04.149145Z","iopub.status.idle":"2024-07-25T03:10:05.388432Z","shell.execute_reply.started":"2024-07-25T03:10:04.14911Z","shell.execute_reply":"2024-07-25T03:10:05.387266Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"/kaggle/input/qatar-dataset/Qatar.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Qatar Development Economics Analyzing Project\n#### Robert Mounce, Kyle Stevens, Fernando Marquez-Hernandez\n## Data Exploration Group Project\n### Initial Questions?\n- Which country are you writing about? Why?\n   - We picked Qatar due to the World Cup. We heard there was controversy of immigrant workers that built the World Cup under very bad conditions. \n- What has helped development in the country?\n    - We already know that natural gas has helped the country\n- Why is it important for development? How did they structure their economy afterwards?\n   - To look at the dynamics of looking from a country that doesn't have a agriculture sector still being able to be successful from converting natural resources to a subjective one of tourism and being popular to travel to for foriegn destinations.\n- Inspect the major factors of the countries factors?\n    - Tourism\n        - Plane passanger arrivals\n        - Tourism spending\n        - Tourism investing\n    - Investment\n        - Domestic investment\n        - Foreign investment\n    - Natural Gas Export\n        - How much of the GDP comes from natural gas?\n- Where do the data come from? \n    - Dataset information:  From The World Bank\n- What years are you analyzing? \n    - Years 1990-2024\n- Who collects these data? Brief summary statistics (can be graphic or a table).\n    - World Bank\n- Analyzing Time Series Data\n    - GDP \n    - Migrant Workers\n### Conclusion \nAfter analyzing the data we have come to conclusions that Qatar has improved there economy with __% of the \n","metadata":{}},{"cell_type":"code","source":"# Load the data from Kaggle input directory\nfile_path = '/kaggle/input/qatar-dataset/Qatar.csv'\n\n# Load the main data sheet\ndf = pd.read_csv(file_path)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:10:14.785662Z","iopub.execute_input":"2024-07-25T03:10:14.786099Z","iopub.status.idle":"2024-07-25T03:10:14.796427Z","shell.execute_reply.started":"2024-07-25T03:10:14.786065Z","shell.execute_reply":"2024-07-25T03:10:14.795033Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## Explore the Data","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:10:31.510514Z","iopub.execute_input":"2024-07-25T03:10:31.510983Z","iopub.status.idle":"2024-07-25T03:10:31.544302Z","shell.execute_reply.started":"2024-07-25T03:10:31.510947Z","shell.execute_reply":"2024-07-25T03:10:31.542887Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"  Country Name Country Code                                  Series Name  \\\n0        Qatar          QAT                            Population, total   \n1        Qatar          QAT                 Population growth (annual %)   \n2        Qatar          QAT              Income share held by lowest 20%   \n3        Qatar          QAT           Urban population growth (annual %)   \n4        Qatar          QAT  Electric power consumption (kWh per capita)   \n\n         Series Code     1990 [YR1990]     2000 [YR2000]     2014 [YR2014]  \\\n0        SP.POP.TOTL            441675            645937           2214465   \n1        SP.POP.GROW  3.40338936545745  5.18445021336724  8.42688590935528   \n2     SI.DST.FRST.20                ..                ..                ..   \n3        SP.URB.GROW  3.98603312515283  5.39848881165345  8.51084301590232   \n4  EG.USE.ELEC.KH.PC  10342.4463689364  13160.7262008524  16415.2515393108   \n\n      2015 [YR2015]     2016 [YR2016]     2017 [YR2017]     2018 [YR2018]  \\\n0           2414573           2595166           2711755           2766732   \n1  8.65116205432081  7.21280238660749  4.39455430208811  2.00708135491804   \n2                ..                ..                ..                ..   \n3  8.72901439691289  7.28354940135209  4.45815998975693  2.06458950988936   \n4                ..                ..                ..                ..   \n\n      2019 [YR2019]      2020 [YR2020]      2021 [YR2021]      2022 [YR2022]  \\\n0           2807235            2760385            2688235            2695122   \n1  1.45331728352711  -1.68298503942558  -2.64853183197257  0.255862791830044   \n2                ..                 ..                 ..                 ..   \n3  1.50674795331627  -1.63560445377234  -2.60520560824411  0.296133442316452   \n4                ..                 ..                 ..                 ..   \n\n       2023 [YR2023]  \n0            2716391  \n1  0.786068869030495  \n2                 ..  \n3   0.82231528872316  \n4                 ..  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country Name</th>\n      <th>Country Code</th>\n      <th>Series Name</th>\n      <th>Series Code</th>\n      <th>1990 [YR1990]</th>\n      <th>2000 [YR2000]</th>\n      <th>2014 [YR2014]</th>\n      <th>2015 [YR2015]</th>\n      <th>2016 [YR2016]</th>\n      <th>2017 [YR2017]</th>\n      <th>2018 [YR2018]</th>\n      <th>2019 [YR2019]</th>\n      <th>2020 [YR2020]</th>\n      <th>2021 [YR2021]</th>\n      <th>2022 [YR2022]</th>\n      <th>2023 [YR2023]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Qatar</td>\n      <td>QAT</td>\n      <td>Population, total</td>\n      <td>SP.POP.TOTL</td>\n      <td>441675</td>\n      <td>645937</td>\n      <td>2214465</td>\n      <td>2414573</td>\n      <td>2595166</td>\n      <td>2711755</td>\n      <td>2766732</td>\n      <td>2807235</td>\n      <td>2760385</td>\n      <td>2688235</td>\n      <td>2695122</td>\n      <td>2716391</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Qatar</td>\n      <td>QAT</td>\n      <td>Population growth (annual %)</td>\n      <td>SP.POP.GROW</td>\n      <td>3.40338936545745</td>\n      <td>5.18445021336724</td>\n      <td>8.42688590935528</td>\n      <td>8.65116205432081</td>\n      <td>7.21280238660749</td>\n      <td>4.39455430208811</td>\n      <td>2.00708135491804</td>\n      <td>1.45331728352711</td>\n      <td>-1.68298503942558</td>\n      <td>-2.64853183197257</td>\n      <td>0.255862791830044</td>\n      <td>0.786068869030495</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Qatar</td>\n      <td>QAT</td>\n      <td>Income share held by lowest 20%</td>\n      <td>SI.DST.FRST.20</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Qatar</td>\n      <td>QAT</td>\n      <td>Urban population growth (annual %)</td>\n      <td>SP.URB.GROW</td>\n      <td>3.98603312515283</td>\n      <td>5.39848881165345</td>\n      <td>8.51084301590232</td>\n      <td>8.72901439691289</td>\n      <td>7.28354940135209</td>\n      <td>4.45815998975693</td>\n      <td>2.06458950988936</td>\n      <td>1.50674795331627</td>\n      <td>-1.63560445377234</td>\n      <td>-2.60520560824411</td>\n      <td>0.296133442316452</td>\n      <td>0.82231528872316</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Qatar</td>\n      <td>QAT</td>\n      <td>Electric power consumption (kWh per capita)</td>\n      <td>EG.USE.ELEC.KH.PC</td>\n      <td>10342.4463689364</td>\n      <td>13160.7262008524</td>\n      <td>16415.2515393108</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:11:27.4132Z","iopub.execute_input":"2024-07-25T03:11:27.413638Z","iopub.status.idle":"2024-07-25T03:11:27.475069Z","shell.execute_reply.started":"2024-07-25T03:11:27.413604Z","shell.execute_reply":"2024-07-25T03:11:27.473464Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"       Country Name Country Code        Series Name  Series Code  \\\ncount            64           62                 62           62   \nunique            3            1                 62           62   \ntop           Qatar          QAT  Population, total  SP.POP.TOTL   \nfreq             62           62                  1            1   \n\n       1990 [YR1990] 2000 [YR2000] 2014 [YR2014] 2015 [YR2015] 2016 [YR2016]  \\\ncount             62            62            62            62            62   \nunique            22            36            46            44            44   \ntop               ..            ..            ..            ..            ..   \nfreq              38            25            15            17            17   \n\n       2017 [YR2017] 2018 [YR2018] 2019 [YR2019] 2020 [YR2020] 2021 [YR2021]  \\\ncount             62            62            62            62            62   \nunique            45            44            45            45            38   \ntop               ..            ..            ..            ..            ..   \nfreq              16            17            16            16            23   \n\n       2022 [YR2022] 2023 [YR2023]  \ncount             62            62  \nunique            31             6  \ntop               ..            ..  \nfreq              31            57  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country Name</th>\n      <th>Country Code</th>\n      <th>Series Name</th>\n      <th>Series Code</th>\n      <th>1990 [YR1990]</th>\n      <th>2000 [YR2000]</th>\n      <th>2014 [YR2014]</th>\n      <th>2015 [YR2015]</th>\n      <th>2016 [YR2016]</th>\n      <th>2017 [YR2017]</th>\n      <th>2018 [YR2018]</th>\n      <th>2019 [YR2019]</th>\n      <th>2020 [YR2020]</th>\n      <th>2021 [YR2021]</th>\n      <th>2022 [YR2022]</th>\n      <th>2023 [YR2023]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>64</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>3</td>\n      <td>1</td>\n      <td>62</td>\n      <td>62</td>\n      <td>22</td>\n      <td>36</td>\n      <td>46</td>\n      <td>44</td>\n      <td>44</td>\n      <td>45</td>\n      <td>44</td>\n      <td>45</td>\n      <td>45</td>\n      <td>38</td>\n      <td>31</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Qatar</td>\n      <td>QAT</td>\n      <td>Population, total</td>\n      <td>SP.POP.TOTL</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n      <td>..</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>62</td>\n      <td>62</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38</td>\n      <td>25</td>\n      <td>15</td>\n      <td>17</td>\n      <td>17</td>\n      <td>16</td>\n      <td>17</td>\n      <td>16</td>\n      <td>16</td>\n      <td>23</td>\n      <td>31</td>\n      <td>57</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:11:36.318453Z","iopub.execute_input":"2024-07-25T03:11:36.319246Z","iopub.status.idle":"2024-07-25T03:11:36.340144Z","shell.execute_reply.started":"2024-07-25T03:11:36.319206Z","shell.execute_reply":"2024-07-25T03:11:36.338726Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 67 entries, 0 to 66\nData columns (total 16 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   Country Name   64 non-null     object\n 1   Country Code   62 non-null     object\n 2   Series Name    62 non-null     object\n 3   Series Code    62 non-null     object\n 4   1990 [YR1990]  62 non-null     object\n 5   2000 [YR2000]  62 non-null     object\n 6   2014 [YR2014]  62 non-null     object\n 7   2015 [YR2015]  62 non-null     object\n 8   2016 [YR2016]  62 non-null     object\n 9   2017 [YR2017]  62 non-null     object\n 10  2018 [YR2018]  62 non-null     object\n 11  2019 [YR2019]  62 non-null     object\n 12  2020 [YR2020]  62 non-null     object\n 13  2021 [YR2021]  62 non-null     object\n 14  2022 [YR2022]  62 non-null     object\n 15  2023 [YR2023]  62 non-null     object\ndtypes: object(16)\nmemory usage: 8.5+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Cleaning ","metadata":{}},{"cell_type":"markdown","source":"# Step 1: EDA\n- GDP\n- Tourism\n- Natural Gas \n- Invement\n- Population","metadata":{}},{"cell_type":"markdown","source":"## GDP","metadata":{}},{"cell_type":"code","source":"# Specify the Series Code for GDP\nGDP_code = 'NY.GDP.MKTP.CD'\n\n# Filter the data for the specified series code\nGDP = df[df['Series Code'] == GDP_code]\n\n# Extract the Series Name for the title\nGDP_title = df['Series Name'].values[0]\n\n# Drop unnecessary columns and set the year columns to numeric\nGDP = GDP.replace('.', pd.NA).dropna(axis=1, how='all')\nGDP = GDP.T.reset_index()\n# Year\nGDP['Year'] = pd.to_numeric(GDP['Year'], errors='coerce')\nGDP['Value'] = pd.to_numeric(GDP['Value'], errors='coerce')\n\n# Convert GDP to billions for better readability\nGDP['Value'] = GDP['Value'] / 1e9\n\n# Plot the data\nplt.figure(figsize=(10, 6))\nplt.plot(GDP['Year'], GDP['Value'], marker='o')\nplt.title(GDP_title)\nplt.xlabel('Year')\nplt.ylabel('GDP (Billion US$)')\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:15:28.941348Z","iopub.execute_input":"2024-07-25T03:15:28.941755Z","iopub.status.idle":"2024-07-25T03:15:30.648988Z","shell.execute_reply.started":"2024-07-25T03:15:28.941724Z","shell.execute_reply":"2024-07-25T03:15:30.647455Z"},"trusted":true},"execution_count":14,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Year'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[14], line 14\u001b[0m\n\u001b[1;32m     12\u001b[0m GDP \u001b[38;5;241m=\u001b[39m GDP\u001b[38;5;241m.\u001b[39mT\u001b[38;5;241m.\u001b[39mreset_index()\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Year\u001b[39;00m\n\u001b[0;32m---> 14\u001b[0m GDP[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mYear\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mto_numeric(\u001b[43mGDP\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mYear\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m, errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcoerce\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     15\u001b[0m GDP[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mValue\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mto_numeric(GDP[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mValue\u001b[39m\u001b[38;5;124m'\u001b[39m], errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcoerce\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     17\u001b[0m \u001b[38;5;66;03m# Convert GDP to billions for better readability\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: 'Year'"],"ename":"KeyError","evalue":"'Year'","output_type":"error"}]},{"cell_type":"markdown","source":"### Explanation\nWe can see around 2000 to 2005 there was a big change in GDP Growth, lets look at the GDP % growth too !!","metadata":{}},{"cell_type":"markdown","source":"We can see that in 2005 to 2010 there was a growth ranging from 10-25% !! \nI wonder what was the cause the sudden growth, but also losing money in 2020, could this be from the World Cup?\n- Exports of goods and services?\n- Tax Revenue?\n- Any other percentages of growth?","metadata":{}},{"cell_type":"code","source":"# Filter the metadata to find series names that contain '(% of GDP)'\ngdp_percentage_series = df[df['Series Name'].str.contains('% of GDP', na=False)]\n\n# Display the filtered series to select one for plotting\ngdp_percentage_series.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:16:07.421091Z","iopub.execute_input":"2024-07-25T03:16:07.421508Z","iopub.status.idle":"2024-07-25T03:16:07.441021Z","shell.execute_reply.started":"2024-07-25T03:16:07.421474Z","shell.execute_reply":"2024-07-25T03:16:07.439136Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"Empty DataFrame\nColumns: [Country Name, Country Code, Series Name, Series Code, 1990 [YR1990], 2000 [YR2000], 2014 [YR2014], 2015 [YR2015], 2016 [YR2016], 2017 [YR2017], 2018 [YR2018], 2019 [YR2019], 2020 [YR2020], 2021 [YR2021], 2022 [YR2022], 2023 [YR2023]]\nIndex: []","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country Name</th>\n      <th>Country Code</th>\n      <th>Series Name</th>\n      <th>Series Code</th>\n      <th>1990 [YR1990]</th>\n      <th>2000 [YR2000]</th>\n      <th>2014 [YR2014]</th>\n      <th>2015 [YR2015]</th>\n      <th>2016 [YR2016]</th>\n      <th>2017 [YR2017]</th>\n      <th>2018 [YR2018]</th>\n      <th>2019 [YR2019]</th>\n      <th>2020 [YR2020]</th>\n      <th>2021 [YR2021]</th>\n      <th>2022 [YR2022]</th>\n      <th>2023 [YR2023]</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Exporting\nWe can see that exporting has been a big part of the GDP of Qatar. We know that they are a big natural gas exported as well as oil. Lets see how much they export?","metadata":{}},{"cell_type":"markdown","source":"## Natural Gas and Oil Exports","metadata":{}},{"cell_type":"code","source":"natr","metadata":{"execution":{"iopub.status.busy":"2024-07-25T03:10:05.708035Z","iopub.status.idle":"2024-07-25T03:10:05.708498Z","shell.execute_reply.started":"2024-07-25T03:10:05.708271Z","shell.execute_reply":"2024-07-25T03:10:05.70829Z"},"trusted":true},"execution_count":null,"outputs":[]}]}